#!/bin/bash

# Ensure a private umask
umask 077

function log() {
    echo "$@"
}

function echoerr() {
    echo "$@" 1>&2
}

function genpassword() {
    echo $(pwgen 48 1)
}

function stdbool() {
    if [ -z "$1" ] ; then
        echo "n"
    else
        echo ${1:0:1} | tr [A-Z] [a-z]
    fi
}

# Reads the given environment variable name, detects if its a file and templates
# it out to the given output file path. Optionally allows the process to be skipped
# if the value is blank.
# Usage: handle_file_input_envvar <options> ENVVAR OUTFILE
# Valid options: --can-disable --allow-blank --append
function handle_file_input_envvar() {
    local can_disable allow_blank do_append

    while true; do
        case $1 in
        --can-disable) can_disable=y ; shift ;;
        --allow-blank) allow_blank=y ; shift ;;
        --append) do_append=y ; shift ;;
        *)
            if [ "${1:0:2}" != "--" ] ; then
                break
            else  
                log "handle_file_input_envvar: Unknown option received: $1"
                exit 1
            fi
            ;;
        esac
    done

    local envvar="$1"
    local outfile="$2"
    
    # Sanity checks
    if [ "$#" -ne 2 ] ; then
        log "handle_file_input_envvar: Got $# arguments, expected 2."
        exit 1
    fi
    
    eval local envval="\$$envvar"

    if [ "${can_disable}" = "y" ] && [ "${envval}" = "disabled" ] ; then
        log "$envvar disabled by user requested."
        return
    elif [ "${envval}" = "disabled" ] ; then
        log "$envvar is set to \"disabled\" but this value is mandatory."
        exit 1
    fi
    
    if [ -z "${envval}" ] && [ "y" != "${allow_blank}" ]; then
        log "$envvar is blank instead of being explicitly disabled and must contain a value."
        exit 1
    fi
    
    if [ "${envval:0:1}" = "/" ] ; then
        log "$envvar is path."
        if [ ! -e "$envval" ] ; then
            log "$envval does not exist."
            exit 1
        fi
        
        if [ "$do_append" = "y" ] ; then
            cat "$envval" >> "$outfile"
        else
            cat "$envval" > "$outfile"
        fi
    else
        log "$envvar is literal."

        if [ "$do_append" = "y" ] ; then
            echo -n "$envval" >> "$outfile"
        else
            echo -n "$envval" > "$outfile"
        fi
    fi
}

if [ -z $HOSTNAME ] ; then
    HOSTNAME=$(hostname -f)
fi

log "Starting up with hostname: $HOSTNAME"

DATA_DIR=/data

mkdir -p $DATA_DIR
chmod 755 $DATA_DIR

chown root:pdns ${DATA_DIR}
chmod 0774 ${DATA_DIR}

powerdns_password_file=${DATA_DIR}/dbpassword.powerdns
powerdns_apikey_file=${DATA_DIR}/api-key.powerdns
# TODO: this is a temporary measure. It wraps basic auth around the entire
# REST API. In the future authentication will do an LDAP lookup and implement
# middleware for users.
# Note: this MUST be exported as nginx needs to know where it is.
export powerdns_admin_htpasswd=${DATA_DIR}/admin.htpasswd

if [ -z "$API_KEY" ] ; then
    if [ ! -e "$powerdns_apikey_file" ]; then
        log "Generating api-key for powerdns REST API"
        API_KEY=$(genpassword)
        echo -n "$API_KEY" > $powerdns_apikey_file
    else
        log "Loaded api-eky for powerdns REST API"
        API_KEY="$(cat $powerdns_apikey_file)"
    fi
fi

log "Templating powerdns configuration..."
mkdir -m 744 -p /run/powerdns
p2 -t /etc/powerdns/pdns.conf.p2 -o /run/powerdns/pdns.conf || ( echoerr "Templating pdns config failed." ; exit 1 )
chmod 644 /run/powerdns/pdns.conf

cat /pdns.schema.sql | sqlite3 ${DATA_DIR}/powerdns.db || ( echoerr "Failed initializing pdns DB." ; exit )

# This structure ensures we can CTRL+C on the desktop.
/usr/sbin/pdns_server --config-dir=/run/powerdns --guardian=no --daemon=no --write-pid=no 2>&1 &
PID=$!
trap "kill -TERM $PID" INT TERM
wait $PID
wait $PID
exit $?
